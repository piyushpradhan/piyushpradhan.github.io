I"&<h1 id="learning-binary-exploitation--1">Learning Binary Exploitation — 1</h1>

<p>Hello there, I was facing a lot of difficulties in properly understanding binary exploitation. I thought, it may be helpful if I explain it in a blog while trying to understand it myself. So, here’s the first one…</p>

<h1 id="understanding-memory-diagram"><strong>Understanding memory diagram</strong></h1>

<p><img src="/assets/images/learning-binary-exploitation-1/bin-exp-1.png" alt="" /></p>

<p>This is what the memory diagram of a 32-bit executable looks like. Let me walk you through the function of each one of these:</p>

<ol>
  <li><strong>Command line arguments and environment variables</strong>: Well, this one is pretty obvious, this stores the arguments we provide while executing the binary and the environment variables.</li>
  <li><strong>Stack</strong>: It functions like a regular stack and the variables declared inside the code are stored here BUT this stack is in reverse order. In fact, the whole memory diagram is drawn in a way such that the highest memory address is at the top and the lowest is at the bottom. So, the stack actually grows downwards towards the lowest memory address.</li>
  <li><strong>Heap</strong>: It stores the dynamic variables that are generated by *alloc functions. It grows upwards, i.e. from the lowest address to the highest address.</li>
  <li><strong>Uninitialized Data(BSS)</strong>: This section stores all the uninitialized variables that were declared in the code. It initializes those variables to 0 by default.</li>
  <li><strong>Initialized Data</strong>: Yes, you guessed it, this part stores the initialized variables.</li>
  <li><strong>Read-Only data + source code</strong>: this part stores the binary code along with read only data, that can’t be tampered with.</li>
</ol>

<p>Now, to exploit the binary we need to know a bit more than just the functions of each component… I think (-_-;)</p>

<p>So, I learnt a bit about ELF file format.</p>

<h1 id="elf-file-format">ELF File Format</h1>

<p>It stands for <strong>Executable/Extensible and Linkable Format</strong>, because well it can be either linkable or executable. ELF files store the program and its data.<br />
Every ELF file contains file headers, program headers and section headers.</p>

<ol>
  <li><strong>File headers</strong>: These basically determine if the program should use 32-bit or 64-bit memory address. This contains information like entry point which defines where to begin program execution.</li>
  <li><strong>Program headers</strong>: This describes how the program should be loaded into memory.</li>
  <li><strong>Section headers</strong>: Contains metadata describing the various components of the program. It stores a lot of semantic information which are not very important when loading headers, so these are skipped sometimes.<br />
Some important sections inside section headers:<br />
1. <strong>.text</strong> - the executable code of your program<br />
2. <strong>.plt</strong> and <strong>.got</strong> - used to resolve and dispatch library calls<br />
3. <strong>.data</strong> - used for pre-initialized global writable data<br />
4. <strong>.rodata</strong> - used for global read-only data<br />
5. <strong>.bss</strong> - used for uninitialized global writable data</li>
</ol>

<p>Thank you for reading.</p>
:ET